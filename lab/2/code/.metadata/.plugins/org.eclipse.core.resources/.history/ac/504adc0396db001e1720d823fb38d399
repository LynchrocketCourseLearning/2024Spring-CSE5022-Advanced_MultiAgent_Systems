package jzombies;

import java.util.List;

import repast.simphony.engine.watcher.Watch;
import repast.simphony.engine.watcher.WatcherTriggerSchedule;
import repast.simphony.query.space.grid.GridCell;
import repast.simphony.query.space.grid.GridCellNgh;
import repast.simphony.random.RandomHelper;
import repast.simphony.relogo.ide.dynamics.NetLogoSystemDynamicsParser.intg_return;
import repast.simphony.space.SpatialMath;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.continuous.NdPoint;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridPoint;
import repast.simphony.util.SimUtilities;

public class Human {
	private ContinuousSpace<Object> space;
	private Grid<Object> grid;
	private int energy, startingEnergy;

	public Human(ContinuousSpace<Object> space, Grid<Object> grid, int energy) {
		this.space = space;
		this.grid = grid;
		this.energy = startingEnergy = energy;
	}

	@Watch(watcheeClassName = "jzombies.Zombie", watcheeFieldNames = "moved", query = "within_moore 1", whenToTrigger = WatcherTriggerSchedule.IMMEDIATE)
	public void run() {
		GridPoint pt = grid.getLocation(this);
		GridCellNgh<Zombie> nghCreator = new GridCellNgh<Zombie>(grid, pt, Zombie.class, 1, 1);
		List<GridCell<Zombie>> gridCells = nghCreator.getNeighborhood(true);
		SimUtilities.shuffle(gridCells, RandomHelper.getUniform());

		GridPoint pointWithLeastZombies = null;
		int minCount = Integer.MAX_VALUE;
		for(GridCell<Zombie> cell : gridCells) {
			if (cell.size() < minCount) {
				pointWithLeastZombies = cell.getPoint();
				minCount = cell.size();
			}
		}
		
		GridCellNgh<Shelter> nghShelterCreator = new GridCellNgh<Shelter>(grid, pt, Shelter.class, 1, 1);
		List<GridCell<Shelter>> shelterGridCells = nghShelterCreator.getNeighborhood(true);
		SimUtilities.shuffle(shelterGridCells, RandomHelper.getUniform());
		int leastDistance = Integer.MAX_VALUE;
		for(GridCell<Shelter> cell : shelterGridCells) {
			cell.getPoint()
		}
		

		if(energy > 0) {
			moveTowards(pointWithLeastZombies);
		}else {
			energy = startingEnergy;
		}
	}

	public void moveTowards(GridPoint pt) {
		//verify if Human is not in the Point of Interest
		if(!pt.equals(grid.getLocation(this))) {
			//Zombie current location
			NdPoint mypoint = space.getLocation(this);
			NdPoint otherpoint = new NdPoint(pt.getX(), pt.getY());
			double angle = SpatialMath.calcAngleFor2DMovement(space, mypoint, otherpoint);
			space.moveByVector(this, 2, angle, 0);

			//Human moves within the space
			mypoint = space.getLocation(this);
			grid.moveTo(this, (int)mypoint.getX(), (int)mypoint.getY());
			energy--;
		}

	}


}